name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: evision-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 11 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        
    # 그래들 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # create application-secret.yml
    - name: Create application-secret.yml
      run: |
        # application-secret.yml 생성
        touch ./src/main/resources/application-secret.properties
        
        # Secrets의 APPLICATION_SECRET 값을 application-secret.yml에 쓰기
        echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.properties
      shell: bash
      
    # (3) Gradle build (Test 제외)
    - name: Build with Gradle
      run: ./gradlew bootJar

    # Docker Image Build
    - name: Web Docker Build & Push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}

#     # Github Action IP 가져오기
#     - name: Get Github Actions IP
#       id: ip
#       uses: haythem/public-ip@v1.3
      
#     # EC2
#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     # 보안 그룹에 ip 추가
#     - name: Add Github Actions IP to Security group
#       run: |
#         aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    # EC2 접속 & Pull & 실행
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script: |
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker start BabyakMongo
          sudo docker rm $(sudo docker ps -a -q -f status=exited)
          sudo docker rmi $(sudo docker images -q)
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}

#     # 보안 그룹에서 ip 삭제
#     - name: Remove Github Actions IP From Security Group
#       run: |
#         aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
